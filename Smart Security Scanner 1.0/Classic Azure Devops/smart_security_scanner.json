{"source":2,"revision":163,"description":null,"createdBy":{"displayName":"Sagar Lad","url":"https://spsprodweu1.vssps.visualstudio.com/A426f4a3f-4518-4e9f-9a18-0f4f337b91af/_apis/Identities/2ab7979e-3515-6eec-8635-3db7bfe88ad5","_links":{"avatar":{"href":"https://dev.azure.com/sagarlad/_apis/GraphProfile/MemberAvatars/aad.MmFiNzk3OWUtMzUxNS03ZWVjLTg2MzUtM2RiN2JmZTg4YWQ1"}},"id":"2ab7979e-3515-6eec-8635-3db7bfe88ad5","uniqueName":"sagu94271@gmail.com","imageUrl":"https://dev.azure.com/sagarlad/_apis/GraphProfile/MemberAvatars/aad.MmFiNzk3OWUtMzUxNS03ZWVjLTg2MzUtM2RiN2JmZTg4YWQ1","descriptor":"aad.MmFiNzk3OWUtMzUxNS03ZWVjLTg2MzUtM2RiN2JmZTg4YWQ1"},"createdOn":"2020-12-14T08:27:51.650Z","modifiedBy":{"displayName":"Sagar Lad","url":"https://spsprodweu1.vssps.visualstudio.com/A426f4a3f-4518-4e9f-9a18-0f4f337b91af/_apis/Identities/2ab7979e-3515-6eec-8635-3db7bfe88ad5","_links":{"avatar":{"href":"https://dev.azure.com/sagarlad/_apis/GraphProfile/MemberAvatars/aad.MmFiNzk3OWUtMzUxNS03ZWVjLTg2MzUtM2RiN2JmZTg4YWQ1"}},"id":"2ab7979e-3515-6eec-8635-3db7bfe88ad5","uniqueName":"sagu94271@gmail.com","imageUrl":"https://dev.azure.com/sagarlad/_apis/GraphProfile/MemberAvatars/aad.MmFiNzk3OWUtMzUxNS03ZWVjLTg2MzUtM2RiN2JmZTg4YWQ1","descriptor":"aad.MmFiNzk3OWUtMzUxNS03ZWVjLTg2MzUtM2RiN2JmZTg4YWQ1"},"modifiedOn":"2021-01-24T08:43:38.490Z","isDeleted":false,"lastRelease":{"id":39071,"name":"Release-95","artifacts":[],"_links":{},"description":"","releaseDefinition":{"id":400,"projectReference":null,"_links":{}},"createdOn":"2021-01-24T14:59:54.483Z","createdBy":{"displayName":"Sagar Lad","url":"https://spsprodweu1.vssps.visualstudio.com/A426f4a3f-4518-4e9f-9a18-0f4f337b91af/_apis/Identities/2ab7979e-3515-6eec-8635-3db7bfe88ad5","_links":{"avatar":{"href":"https://dev.azure.com/sagarlad/_apis/GraphProfile/MemberAvatars/aad.MmFiNzk3OWUtMzUxNS03ZWVjLTg2MzUtM2RiN2JmZTg4YWQ1"}},"id":"2ab7979e-3515-6eec-8635-3db7bfe88ad5","uniqueName":"sagu94271@gmail.com","imageUrl":"https://dev.azure.com/sagarlad/_apis/GraphProfile/MemberAvatars/aad.MmFiNzk3OWUtMzUxNS03ZWVjLTg2MzUtM2RiN2JmZTg4YWQ1","descriptor":"aad.MmFiNzk3OWUtMzUxNS03ZWVjLTg2MzUtM2RiN2JmZTg4YWQ1"}},"variables":{},"variableGroups":[2447],"environments":[{"id":1031,"name":"Development","rank":1,"owner":{"displayName":"Sagar Lad","url":"https://spsprodweu1.vssps.visualstudio.com/A426f4a3f-4518-4e9f-9a18-0f4f337b91af/_apis/Identities/2ab7979e-3515-6eec-8635-3db7bfe88ad5","_links":{"avatar":{"href":"https://dev.azure.com/sagarlad/_apis/GraphProfile/MemberAvatars/aad.MmFiNzk3OWUtMzUxNS03ZWVjLTg2MzUtM2RiN2JmZTg4YWQ1"}},"id":"2ab7979e-3515-6eec-8635-3db7bfe88ad5","uniqueName":"sagu94271@gmail.com","imageUrl":"https://dev.azure.com/sagarlad/_apis/GraphProfile/MemberAvatars/aad.MmFiNzk3OWUtMzUxNS03ZWVjLTg2MzUtM2RiN2JmZTg4YWQ1","descriptor":"aad.MmFiNzk3OWUtMzUxNS03ZWVjLTg2MzUtM2RiN2JmZTg4YWQ1"},"variables":{},"variableGroups":[],"preDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":3906}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":1}},"deployStep":{"id":3907},"postDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":3908}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":2}},"deployPhases":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"agentSpecification":{"identifier":"vs2017-win2016"},"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":1564,"demands":[],"enableAccessToken":false,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":1,"name":"Agent job","refName":null,"workflowTasks":[{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"[General] Replace Dynamic Variable in config file","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"ConnectedServiceNameARM":"$(ServiceConnection)","ScriptType":"InlineScript","ScriptPath":"","Inline":"((Get-Content -path $(System.DefaultWorkingDirectory)\\$(Build.DefinitionName)\\$(sscnConfigPath) -Raw) -replace '{Environment}',\"$(Environment)\") | Set-Content -Path $(System.DefaultWorkingDirectory)\\$(Build.DefinitionName)\\$(sscnConfigPath)","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"6392f95f-7e76-4a18-b3c7-7f078d2f7700","version":"0.*","name":"[General] Initialize Pipeline Variables","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"scriptSource":"inline","scriptPath":"$(ServiceConnection)","script":"import sys, configparser\n\nlocal_path, file_path = sys.argv[1],  sys.argv[2]\nusecase, env = sys.argv[3], sys.argv[4]\n\nconfp = configparser.ConfigParser()\nconfp.optionxform = str\nconfp.read_file(open(local_path+file_path))\n\nfor each_section in confp.sections():\n    if each_section == 'pipeline_variables_group':\n        for (each_key, each_val) in confp.items(each_section):\n            each_val = each_val.replace('{usecase}', usecase, 1)\n            each_val = each_val.replace('{env}', env, 1)\n            print('##vso[task.setvariable variable='+each_key+';]%s'\n                  % (each_val))","arguments":"$(System.DefaultWorkingDirectory) \\$(Build.DefinitionName)\\$(sscnConfigPath) $(usecase) $(env)","pythonInterpreter":"","workingDirectory":"","failOnStderr":"false"}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"[General] Derive AAD Object IDs/Subscription Id/Tenant Id","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeededOrFailed()","inputs":{"ConnectedServiceNameARM":"$(ServiceConnection)","ScriptType":"InlineScript","ScriptPath":"","Inline":"Install-Module Az.Resources -Force\n\n\n# Get Subscription ID\n$Context = Get-AzContext\n$SubscriptionId = $Context.Subscription.Id\nwrite-host \"##vso[task.setvariable variable=SubscriptionId]$SubscriptionId\"\nwrite-host $SubscriptionId \n\n# Get Tenant ID\n$tenantId = $Context.Subscription.TenantId\nwrite-host \"##vso[task.setvariable variable=tenantId]$tenantId\"\nwrite-host $tenantId","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"[Resource] Check Non sagarlad Products in Resource Group ","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeededOrFailed()","inputs":{"ConnectedServiceNameARM":"$(ServiceConnection)","ScriptType":"InlineScript","ScriptPath":"","Inline":"# Get a list of all Azure Resource\n$Resources = Get-AzResource -ResourceGroupName $(ResourceGroupName)\n\n$present =0\n\n# Check Resource Lock for each Azure Resource\nforeach($rs in $Resources)\n{\n   $rsprovidertag = $rs.Tags.Provider\n   if($rsprovidertag -ne \" Azure\")\n   {\n        $present=$present+1\n        echo $rs\n   }  \n}\n\n# Check Non  sagarlad Products\nif($present -gt 0)\n{\n    Write-Host \"##vso[task.complete result=Failed;]\"\n    echo \"Non sagarlad Products exists in your resource group. Please check listed resources...\"\n}\nelse\n{\n    echo \"All Resources inside your resource group are sagarlad Products...\"\n}","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"[Resource] Check Deployed sagarlad Product Life Cycle","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeededOrFailed()","inputs":{"ConnectedServiceNameARM":"$(ServiceConnection)","ScriptType":"InlineScript","ScriptPath":"","Inline":"# Get Policy State\n$policystate= Get-AzPolicyState -ResourceGroupName $(ResourceGroupName) | Where-Object {$_.ComplianceState -eq \"NonCompliant\" -and $_.PolicyDefinitionName -eq \"azure-lifecycle-management-v1-deprecated-product\"}\n\n\n# Display Non-complaint resource status\nforeach($ps in $policystate)\n{\n  echo $ps\n}","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"[Resource] Check Permissions at Resource Group Level","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeededOrFailed()","inputs":{"ConnectedServiceNameARM":"$(ServiceConnection)","ScriptType":"InlineScript","ScriptPath":"","Inline":"# List RBAC Role assignment at Resource Group Level\n\n$roles = Get-AzRoleAssignment  -Scope \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)\"\n\n$present = 0\n\nForeach ($rl in $roles)\n{\n  if($rl.scope -eq \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)\")\n  {\n      if($rl.RoleDefinitionName -eq \"Contributor\" -And $rl.ObjectType -eq \"Group\")\n     {\n       echo $rl\n       $present =1\n     }\n  }\n} \n\nif($present -eq 1)\n{\n       Write-Host \"##vso[task.complete result=Failed;]\"\n       echo \"**Action Required** Please remove contributor permission from the resource group...\"\n }\n\n","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"[Resource] Check Resource Lock for Each Resource Type","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeededOrFailed()","inputs":{"ConnectedServiceNameARM":"$(ServiceConnection)","ScriptType":"InlineScript","ScriptPath":"","Inline":"# Get a list of all Azure Resources\n$Resources = Get-AzResource -ResourceGroupName $(ResourceGroupName)\n\n# Check Resource Lock for each Azure Resource\nforeach($rs in $Resources)\n{\n \n Write-Host $rs.Name\n\n$resourcelock = Get-AzResourceLock -ResourceName $rs.Name -ResourceType $rs.ResourceType -ResourceGroupName $(ResourceGroupName)\n  \n  if( $resourcelock.LockId -eq $null )\n  {\n     Write-Host $resourcelock.LockId\n     Write-Host \"**Action Required** Resource Lock doesn't exist for resource : $rs.name\"\n     Write-Host \"##vso[task.complete result=Failed;]\"\n  }\n}","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"[Resource] Check Expired Key Vault Secrets","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeededOrFailed()","inputs":{"ConnectedServiceNameARM":"$(ServiceConnection)","ScriptType":"FilePath","ScriptPath":"$(System.DefaultWorkingDirectory)/$(Build.DefinitionName)/scripts/KeyVaultSecretExpirationAlerts.ps1","Inline":"# You can write your azure powershell scripts inline here. \n# You can also pass predefined and custom variables to this script using arguments","ScriptArguments":"-ResourceGroupName $(ResourceGroupName) -KeyVaultName $(KeyVaultName) -Expiry_Notification_Days 90 -ActioGroupEmail \"sagu94271@gmail.com\"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"[Resource] Advisor Recommendation for Reliability/Security/Performance/Cost/Operational Excellence","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeededOrFailed()","inputs":{"ConnectedServiceNameARM":"$(ServiceConnection)","ScriptType":"InlineScript","ScriptPath":"","Inline":"$advrecom = Get-AzAdvisorRecommendation -ResourceGroupName $(ResourceGroupName) -Category \"Security\"\n\nforeach($adv in $advrecom)\n{\n    echo $adv\n}","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"[Compute] Check if Auto Shutdown Feature is enabled ","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeededOrFailed()","inputs":{"ConnectedServiceNameARM":"$(ServiceConnection)","ScriptType":"InlineScript","ScriptPath":"","Inline":"$Context = Get-AzContext\n$TenantId = $Context.Subscription.TenantId\n$SubscriptionId=$Context.Subscription.Id\n\n#Get the List of VMs from specific resource group \n$VMs=Get-AzVm -ResourceGroupName $(ResourceGroupName)\n \nif($VMs -eq $null){\n \nWrite-Host \"No VMs available in Resource Group. Hence not required to enable auto-shutdown feature.\" -ForegroundColor White\nExit0\n}\nelse\n{\n  \n   $present = 0\n \n   Write-Host \"\"$VMs.Count\" VMs are available in Resource Group\" -ForegroundColor White\n   foreach($VM in $VMs)\n  {\n        $autoshutdown = Get-AzResource -ResourceId \"/subscriptions/$SubscriptionId/resourceGroups/$(ResourceGroupName)/providers/microsoft.devtestlab/schedules/shutdown-computevm-$($VM.name)\"\n\n        try\n        {\n            if($autoshutdown.ResourceType -eq \"microsoft.devtestlab/schedules\")\n            {\n                 $present = 1\n            }\n        }\n        catch\n        {\n               $present =0\n        } \n  }\n}\n\nif ($present -eq 0)\n{    \n   Write-Host \"##vso[task.complete result=Failed;]\"\n    echo \"**Action Required** Please enable Auto Shut Down Feature is not enabled for  VM : $autoshutdown.VM \"}\nelse\n{echo \"Auto Shut Down Feature is enabled for all VMs..\"}","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"[Compute] Check JIT/PIM for VMs ","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeededOrFailed()","inputs":{"ConnectedServiceNameARM":"$(ServiceConnection)","ScriptType":"InlineScript","ScriptPath":"","Inline":"$Context = Get-AzContext\n$TenantId = $Context.Subscription.TenantId\n$SubscriptionId=$Context.Subscription.Id\n\n#Get the List of VMs from specific resource group \n$VMs=Get-AzVm -ResourceGroupName $(ResourceGroupName)\n\nif($VMs -eq $null){\n \nWrite-Host \"No VMs available in Resource Group. Hence not required to enable auto-shutdown feature.\" -ForegroundColor White\nExit0\n}\nelse\n{\n  \n   $present = 0\n \n   Write-Host \"\"$VMs.Count\" VMs are available in Resource Group\" -ForegroundColor White\n   $VMCount= $VMs.count\n}\n\n# Get Number of VMs with JIT/PIM \nInstall-Module -Name Az.Security -Force\n\n$getNWPolicy= Get-AzJitNetworkAccessPolicy -ResourceGroupName $(ResourceGroupName) \necho $getNWPolicy\n\n$cnt=0\nforeach ($vm in $getNWPolicy.VirtualMachines)\n{\n      $cnt = $cnt +1\n}\n\n# Display JIT/PIM status\nif($VMCount -eq $cnt)\n{\n   echo \"Privileged Identity Management is enabled for all VMs in the resource group\"\n}\nelse\n{\n   Write-Host \"##vso[task.complete result=Failed;]\"\n   echo \"**Action Required** Please enable Privileged Identity Management for all VMs in the resource group\"\n}","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"[Storage] Check if SQL Server Firewall setting is enabled","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeededOrFailed()","inputs":{"ConnectedServiceNameARM":"$(ServiceConnection)","ScriptType":"InlineScript","ScriptPath":"","Inline":"# Get List of SQL Servers if any\n$sqlservers = Get-AzSqlServer -ResourceGroupName $(ResourceGroupName)\necho $sqlservers\n\nif($sqlservers -eq $null){\n \nWrite-Host \"No Azure SQL Servers available in the Resource Group.\" -ForegroundColor White\nExit 0\n}\nelse\n{\n     Write-Host \"Azure SQL Servers available in the Resource Group.\" \n\n     # Get the Public Network Access property\n     $nwstatus = (Get-AzSqlServer -ServerName $sqlservers.ServerName -ResourceGroupName $(ResourceGroupName)).PublicNetworkAccess \n\n     if($nwstatus -eq \"Disabled\")\n     {\n         echo \"Public Network Access is already disabled for Azure SQL Server.\"\n     }\n     else\n     {\n        Write-Host \"##vso[task.complete result=Failed;]\"\n        echo \"**Action Required** Please disable Public Network Access on Azure SQL Server. \"\n     }\n}","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"[Storage] Check Storage Account Firewall Setting","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeededOrFailed()","inputs":{"ConnectedServiceNameARM":"$(ServiceConnection)","ScriptType":"InlineScript","ScriptPath":"","Inline":"# Get All Resource Group Storage Accounts\n\n$storageaccounts = (Get-AzStorageAccount -ResourceGroupName $(ResourceGroupName)).StorageAccountName\n\n# Check the status of Firewall setting on each storage account\nForeach ($sa in $storageaccounts )\n{\n   $fwstatus = (Get-AzStorageAccountNetworkRuleSet -ResourceGroupName $(ResourceGroupName) -AccountName $sa).DefaultAction\n   echo $fwstatus\t\n\n   # Log Storage Accounts without Firewall Networks\n   if( $fwstatus = \"Allow\")\n   {\n        Write-Host \"##vso[task.complete result=Failed;]\"\n        echo \"**Action Required** Firewall is not enabled for Storage Account: $sa. Please disable access to public networks...\"\n   }\n}","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"[Network] Check Virtual Network Service Endpoints","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeededOrFailed()","inputs":{"ConnectedServiceNameARM":"$(ServiceConnection)","ScriptType":"InlineScript","ScriptPath":"","Inline":"# Get All Resource Group Storage Accounts\n\n$vnetendpoints =(Get-AzVirtualNetwork -Name $(VNetName) -ResourceGroupName $(VNetResourceGroup)).Subnets.ServiceEndpoints\necho $vnetendpoints\n\nif ($vnetendpoints -ne $null )\n{\n    Write-Host \"##vso[task.complete result=Failed;]\"\n    echo \"**Action Required** Please check if enabled service endpoints are approved by CISO\"\n}","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"[Network] Azure Policy State Compliance","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeededOrFailed()","inputs":{"ConnectedServiceNameARM":"$(ServiceConnection)","ScriptType":"InlineScript","ScriptPath":"","Inline":"# Get Policy State\n$policystate= Get-AzPolicyState -ResourceGroupName $(ResourceGroupName) | Where-Object {$_.ComplianceState -eq \"NonCompliant\"}\n\n\necho $policystate","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}}]}],"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"name":"ReleaseStarted","conditionType":1,"value":""}],"executionPolicy":{"concurrencyCount":1,"queueDepthCount":0},"schedules":[{"jobId":"86d2511e-5226-4604-80d5-84bfef468969","timeZoneId":"W. Europe Standard Time","startHours":5,"startMinutes":30,"daysToRelease":31}],"currentRelease":{"id":39071,"url":"https://vsrm.dev.azure.com/sagarlad/94c99d7b-eb04-4700-a827-176f561cce22/_apis/Release/releases/39071","_links":{}},"retentionPolicy":{"daysToKeep":30,"releasesToKeep":3,"retainBuild":true},"processParameters":{},"properties":{"BoardsEnvironmentType":{"$type":"System.String","$value":"unmapped"},"LinkBoardsWorkItems":{"$type":"System.String","$value":"False"}},"preDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"postDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"environmentTriggers":[],"badgeUrl":"https://vsrm.dev.azure.com/sagarlad/_apis/public/Release/badge/94c99d7b-eb04-4700-a827-176f561cce22/400/1031"}],"artifacts":[{"sourceId":"94c99d7b-eb04-4700-a827-176f561cce22:11631","type":"Build","alias":"sscn_security_ci","definitionReference":{"artifactSourceDefinitionUrl":{"id":"https://dev.azure.com/sagarlad/_permalink/_build/index?collectionId=06e2de9d-0560-4fd5-8c72-c3d0e7d69fa6&projectId=94c99d7b-eb04-4700-a827-176f561cce22&definitionId=11631","name":""},"defaultVersionBranch":{"id":"","name":""},"defaultVersionSpecific":{"id":"","name":""},"defaultVersionTags":{"id":"","name":""},"defaultVersionType":{"id":"latestType","name":"Latest"},"definition":{"id":"11631","name":"sscn_security_ci"},"definitions":{"id":"","name":""},"IsMultiDefinitionType":{"id":"False","name":"False"},"project":{"id":"94c99d7b-eb04-4700-a827-176f561cce22","name":"GRD0001030"},"repository":{"id":"","name":""}},"isPrimary":true,"isRetained":false}],"triggers":[{"schedule":{"jobId":"a0bfb553-60f7-4a8e-a928-9329d6d83143","timeZoneId":"W. Europe Standard Time","startHours":5,"startMinutes":0,"daysToRelease":31},"triggerType":2}],"releaseNameFormat":"Release-$(rev:r)","tags":[],"properties":{"DefinitionCreationSource":{"$type":"System.String","$value":"ReleaseNew"},"IntegrateJiraWorkItems":{"$type":"System.String","$value":"false"},"IntegrateBoardsWorkItems":{"$type":"System.String","$value":"False"}},"id":400,"name":"sscn_smart_security_scanner","path":"\\CONS\\CONS_sscn","projectReference":null,"url":"https://vsrm.dev.azure.com/sagarlad/94c99d7b-eb04-4700-a827-176f561cce22/_apis/Release/definitions/400","_links":{"self":{"href":"https://vsrm.dev.azure.com/sagarlad/94c99d7b-eb04-4700-a827-176f561cce22/_apis/Release/definitions/400"},"web":{"href":"https://dev.azure.com/sagarlad/94c99d7b-eb04-4700-a827-176f561cce22/_release?definitionId=400"}}}
